---
import { Image } from 'astro:assets';
import PabiakImg from '../assets/pabiak.png';
import Button from './Button.astro';

const startDate = new Date("2023-05-01");
const today = new Date();
const yearsOfExperience = today.getFullYear() - startDate.getFullYear() - 
  (today < new Date(today.getFullYear(), startDate.getMonth(), startDate.getDate()) ? 1 : 0);
---
<header
  id='home'
  class='relative min-h-[100svh] grid items-center overflow-hidden px-[clamp(3rem,_6vw,_6rem)] pt-8'
>
  <div class='absolute inset-0 w-full h-full' aria-hidden='true'>
    <canvas class='absolute inset-0 w-full h-full' id='stars-far'></canvas>
    <canvas class='absolute inset-0 w-full h-full' id='stars-mid'></canvas>
    <canvas class='absolute inset-0 w-full h-full' id='stars-near'></canvas>
  </div>
  <div
    class='w-full max-w-[var(--container)] mx-auto relative grid grid-cols-1 md:[grid-template-columns:1.3fr_1fr] gap-[clamp(2rem,_5vw,_5rem)]'
  >
    <div class='pl-2'>
      <div class='chip mb-2'>Frontend Developer • UI tinkerer</div>
      <h1
        class='font-bold font-chakra text-[clamp(2.4rem,_5.6vw,_4.8rem)] leading-none tracking-widest m-0 mb-4 [text-shadow:0_0_20px_#0c3,0_0_60px_#0c3a]'
      >
        Tworzę <span class='text-[var(--primary)]'>intuicyjne</span> i <span
          class='text-[var(--accent)] [text-shadow:0_0_20px_#a0f,0_0_60px_var(--accent-soft)]'
          >wydajne</span
        > aplikacje oraz strony.
      </h1>
      <p
        class='text-[var(--muted)] text-[clamp(1.05rem,_1.4vw,_1.2rem)] max-w-[62ch]'
      >
        Frontend Developer z ponad <span>{yearsOfExperience}</span>-letnim doświadczeniem oraz tytułem
        magistra i inżyniera informatyki. Specjalizuję się w tworzeniu
        wydajnych, intuicyjnych i estetycznych aplikacji webowych, łącząc
        solidne podstawy inżynierskie z dbałością o detale interfejsu.
      </p>
      <div class='flex gap-4 mt-6 w-full flex-col lg:flex-row'>
        <Button href='#projekty'>Zobacz projekty</Button>
        <Button href='#kontakt' variant='secondary'>Porozmawiajmy</Button>
      </div>
    </div>
    <figure
      class='self-center aspect-square rounded-3xl relative overflow-hidden border-1 border-solid border-[#234233] grid place-items-center shadow-[var(--glow-green)]'
    >
      <Image src={PabiakImg} alt='Animowana ikona/portret Piotra' />
    </figure>
  </div>
</header>

<script is:inline>
  const STAR_LAYERS = [
    {
      id: 'stars-far',
      count: 120,
      size: [1, 2],
      scroll: 0.12,
      drift: 6,
      color: 'rgba(200,255,235,0.45)',
    },
    {
      id: 'stars-mid',
      count: 90,
      size: [1.5, 2.5],
      scroll: 0.24,
      drift: 12,
      color: 'rgba(160,255,215,0.70)',
    },
    {
      id: 'stars-near',
      count: 70,
      size: [2, 3.2],
      scroll: 0.4,
      drift: 20,
      color: 'rgba(80,255,180,0.90)',
    },
  ];

  const header = document.getElementById('home');
  let yScroll = 0;

  const rand = (min, max) => Math.random() * (max - min) + min;

  const initLayer = (layer) => {
    const canvas = document.getElementById(layer.id);
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const dpr = Math.min(2, window.devicePixelRatio || 1);
    const { width, height } = header.getBoundingClientRect();

    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = width + 'px';
    canvas.style.height = height + 'px';
    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);

    layer.ctx = ctx;
    layer.width = width;
    layer.height = height;
    layer.stars = Array.from({ length: layer.count }, () => ({
      x: rand(0, width),
      y: rand(0, height),
      r: rand(layer.size[0], layer.size[1]),
      a: Math.random() * Math.PI * 2,
      tw: rand(0.6, 1.2),
    }));
  };

  const drawLayer = (layer, t) => {
    if (!layer.ctx) return;

    const { ctx, width, height, stars, color, scroll, drift } = layer;
    ctx.clearRect(0, 0, width, height);
    ctx.fillStyle = color;

    const offsetY = (yScroll * scroll + t * drift) % height;

    stars.forEach((s) => {
      const y = (s.y + offsetY) % height;
      const tw = 0.85 + 0.15 * Math.sin(t * 1.2 * s.tw + s.a);
      ctx.beginPath();
      ctx.arc(s.x, y, s.r * tw, 0, Math.PI * 2);
      ctx.fill();
    });
  };

  const resizeAll = () => {
    STAR_LAYERS.forEach(initLayer);
  };

  const animate = (time) => {
    const t = time / 1000;
    STAR_LAYERS.forEach((layer) => drawLayer(layer, t));
    requestAnimationFrame(animate);
  };

  resizeAll();
  window.addEventListener('resize', resizeAll, { passive: true });
  window.addEventListener(
    'scroll',
    () => {
      yScroll = window.scrollY || 0;
    },
    { passive: true }
  );
  requestAnimationFrame(animate);
</script>
